%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: git
-module(messages).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Type/1, enum_value_by_symbol_Type/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types
-type 'Type'() :: 'NONE' | 'SUCESIUM' | 'ERRORREPLY' | 'ALBUMS' | 'REGISTER' | 'LOGIN' | 'LOGOUT' | 'ALBUMSLIST' | 'ALBUMCREATE' | 'ALBUM' | 'ALBUMEDIT' | 'STARTENTRANCE' | 'ENDENTRANCE' | 'NODESINFO' | 'READ' | 'WRITE' | 'NODEIP' | 'NEWCLIENT' | 'ISLASTREPLY' | 'ISLAST' | 'LEAVE' | 'UPDATE'.
-export_type(['Type'/0]).

%% message types
-type 'Message'() ::
      #{type                    => 'NONE' | 'SUCESIUM' | 'ERRORREPLY' | 'ALBUMS' | 'REGISTER' | 'LOGIN' | 'LOGOUT' | 'ALBUMSLIST' | 'ALBUMCREATE' | 'ALBUM' | 'ALBUMEDIT' | 'STARTENTRANCE' | 'ENDENTRANCE' | 'NODESINFO' | 'READ' | 'WRITE' | 'NODEIP' | 'NEWCLIENT' | 'ISLASTREPLY' | 'ISLAST' | 'LEAVE' | 'UPDATE' | integer(), % = 1, optional, enum Type
        user_data               => 'UserData'(),    % = 2, optional
        error_message           => 'ErrorReply'(),  % = 3, optional
        album_name              => unicode:chardata(), % = 4, optional
        albums                  => 'Albums'(),      % = 5, optional
        album                   => 'Album'(),       % = 6, optional
        node_info               => 'NodeInfo'(),    % = 7, optional
        nodes_infos             => ['NodeInfo'()],  % = 8, repeated
        token                   => non_neg_integer(), % = 9, optional, 64 bits
        nodes_ips               => ['NodeIp'()],    % = 10, repeated
        new_client              => 'NewClient'(),   % = 11, optional
        is_last                 => boolean() | 0 | 1, % = 12, optional
        leave_data              => 'LeaveData'()    % = 13, optional
       }.

-type 'UserData'() ::
      #{username                => unicode:chardata(), % = 1, optional
        password                => unicode:chardata() % = 2, optional
       }.

-type 'ErrorReply'() ::
      #{message                 => unicode:chardata() % = 1, optional
       }.

-type 'Albums'() ::
      #{names                   => [unicode:chardata()] % = 1, repeated
       }.

-type 'Classification'() ::
      #{username                => unicode:chardata(), % = 1, optional
        value                   => non_neg_integer() % = 2, optional, 32 bits
       }.

-type 'File'() ::
      #{name                    => unicode:chardata(), % = 1, optional
        hash                    => non_neg_integer(), % = 2, optional, 64 bits
        classifications         => ['Classification'()] % = 3, repeated
       }.

-type 'Client'() ::
      #{username                => unicode:chardata(), % = 1, optional
        ip                      => unicode:chardata(), % = 2, optional
        port                    => non_neg_integer() % = 3, optional, 32 bits
       }.

-type 'NewClient'() ::
      #{clients                 => ['Client'()],    % = 1, repeated
        clock                   => non_neg_integer(), % = 2, optional, 32 bits
        position                => non_neg_integer() % = 3, optional, 32 bits
       }.

-type 'LeaveData'() ::
      #{name                    => unicode:chardata(), % = 1, optional
        clock                   => non_neg_integer(), % = 2, optional, 32 bits
        position                => non_neg_integer() % = 3, optional, 32 bits
       }.

-type 'Album'() ::
      #{files                   => ['File'()],      % = 1, repeated
        users                   => [unicode:chardata()] % = 2, repeated
       }.

-type 'NodeInfo'() ::
      #{ip                      => unicode:chardata(), % = 1, optional
        port                    => non_neg_integer(), % = 2, optional, 32 bits
        tokens                  => [non_neg_integer()] % = 3, repeated, 64 bits
       }.

-type 'NodeIp'() ::
      #{ip                      => unicode:chardata(), % = 1, optional
        port                    => non_neg_integer() % = 2, optional, 32 bits
       }.

-export_type(['Message'/0, 'UserData'/0, 'ErrorReply'/0, 'Albums'/0, 'Classification'/0, 'File'/0, 'Client'/0, 'NewClient'/0, 'LeaveData'/0, 'Album'/0, 'NodeInfo'/0, 'NodeIp'/0]).
-type '$msg_name'() :: 'Message' | 'UserData' | 'ErrorReply' | 'Albums' | 'Classification' | 'File' | 'Client' | 'NewClient' | 'LeaveData' | 'Album' | 'NodeInfo' | 'NodeIp'.
-type '$msg'() :: 'Message'() | 'UserData'() | 'ErrorReply'() | 'Albums'() | 'Classification'() | 'File'() | 'Client'() | 'NewClient'() | 'LeaveData'() | 'Album'() | 'NodeInfo'() | 'NodeIp'().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Message' -> encode_msg_Message(id(Msg, TrUserData), TrUserData);
        'UserData' -> encode_msg_UserData(id(Msg, TrUserData), TrUserData);
        'ErrorReply' -> encode_msg_ErrorReply(id(Msg, TrUserData), TrUserData);
        'Albums' -> encode_msg_Albums(id(Msg, TrUserData), TrUserData);
        'Classification' -> encode_msg_Classification(id(Msg, TrUserData), TrUserData);
        'File' -> encode_msg_File(id(Msg, TrUserData), TrUserData);
        'Client' -> encode_msg_Client(id(Msg, TrUserData), TrUserData);
        'NewClient' -> encode_msg_NewClient(id(Msg, TrUserData), TrUserData);
        'LeaveData' -> encode_msg_LeaveData(id(Msg, TrUserData), TrUserData);
        'Album' -> encode_msg_Album(id(Msg, TrUserData), TrUserData);
        'NodeInfo' -> encode_msg_NodeInfo(id(Msg, TrUserData), TrUserData);
        'NodeIp' -> encode_msg_NodeIp(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Message(Msg, TrUserData) -> encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{type := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'NONE'; TrF1 =:= 0 -> Bin;
                        true -> e_enum_Type(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{user_data := F2} -> begin TrF2 = id(F2, TrUserData), e_mfield_Message_user_data(TrF2, <<B1/binary, 18>>, TrUserData) end;
             _ -> B1
         end,
    B3 = case M of
             #{error_message := F3} -> begin TrF3 = id(F3, TrUserData), e_mfield_Message_error_message(TrF3, <<B2/binary, 26>>, TrUserData) end;
             _ -> B2
         end,
    B4 = case M of
             #{album_name := F4} -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 34>>, TrUserData) end;
             _ -> B3
         end,
    B5 = case M of
             #{albums := F5} -> begin TrF5 = id(F5, TrUserData), e_mfield_Message_albums(TrF5, <<B4/binary, 42>>, TrUserData) end;
             _ -> B4
         end,
    B6 = case M of
             #{album := F6} -> begin TrF6 = id(F6, TrUserData), e_mfield_Message_album(TrF6, <<B5/binary, 50>>, TrUserData) end;
             _ -> B5
         end,
    B7 = case M of
             #{node_info := F7} -> begin TrF7 = id(F7, TrUserData), e_mfield_Message_node_info(TrF7, <<B6/binary, 58>>, TrUserData) end;
             _ -> B6
         end,
    B8 = case M of
             #{nodes_infos := F8} ->
                 TrF8 = id(F8, TrUserData),
                 if TrF8 == [] -> B7;
                    true -> e_field_Message_nodes_infos(TrF8, B7, TrUserData)
                 end;
             _ -> B7
         end,
    B9 = case M of
             #{token := F9} -> begin TrF9 = id(F9, TrUserData), e_varint(TrF9, <<B8/binary, 72>>, TrUserData) end;
             _ -> B8
         end,
    B10 = case M of
              #{nodes_ips := F10} ->
                  TrF10 = id(F10, TrUserData),
                  if TrF10 == [] -> B9;
                     true -> e_field_Message_nodes_ips(TrF10, B9, TrUserData)
                  end;
              _ -> B9
          end,
    B11 = case M of
              #{new_client := F11} -> begin TrF11 = id(F11, TrUserData), e_mfield_Message_new_client(TrF11, <<B10/binary, 90>>, TrUserData) end;
              _ -> B10
          end,
    B12 = case M of
              #{is_last := F12} -> begin TrF12 = id(F12, TrUserData), e_type_bool(TrF12, <<B11/binary, 96>>, TrUserData) end;
              _ -> B11
          end,
    case M of
        #{leave_data := F13} -> begin TrF13 = id(F13, TrUserData), e_mfield_Message_leave_data(TrF13, <<B12/binary, 106>>, TrUserData) end;
        _ -> B12
    end.

encode_msg_UserData(Msg, TrUserData) -> encode_msg_UserData(Msg, <<>>, TrUserData).


encode_msg_UserData(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{username := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{password := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_ErrorReply(Msg, TrUserData) -> encode_msg_ErrorReply(Msg, <<>>, TrUserData).


encode_msg_ErrorReply(#{} = M, Bin, TrUserData) ->
    case M of
        #{message := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_Albums(Msg, TrUserData) -> encode_msg_Albums(Msg, <<>>, TrUserData).


encode_msg_Albums(#{} = M, Bin, TrUserData) ->
    case M of
        #{names := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_Albums_names(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_Classification(Msg, TrUserData) -> encode_msg_Classification(Msg, <<>>, TrUserData).


encode_msg_Classification(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{username := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{value := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_File(Msg, TrUserData) -> encode_msg_File(Msg, <<>>, TrUserData).


encode_msg_File(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{hash := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{classifications := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true -> e_field_File_classifications(TrF3, B2, TrUserData)
            end;
        _ -> B2
    end.

encode_msg_Client(Msg, TrUserData) -> encode_msg_Client(Msg, <<>>, TrUserData).


encode_msg_Client(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{username := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{ip := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{port := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_NewClient(Msg, TrUserData) -> encode_msg_NewClient(Msg, <<>>, TrUserData).


encode_msg_NewClient(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{clients := F1} ->
                 TrF1 = id(F1, TrUserData),
                 if TrF1 == [] -> Bin;
                    true -> e_field_NewClient_clients(TrF1, Bin, TrUserData)
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{clock := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{position := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_LeaveData(Msg, TrUserData) -> encode_msg_LeaveData(Msg, <<>>, TrUserData).


encode_msg_LeaveData(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{clock := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{position := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= 0 -> B2;
                   true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_Album(Msg, TrUserData) -> encode_msg_Album(Msg, <<>>, TrUserData).


encode_msg_Album(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{files := F1} ->
                 TrF1 = id(F1, TrUserData),
                 if TrF1 == [] -> Bin;
                    true -> e_field_Album_files(TrF1, Bin, TrUserData)
                 end;
             _ -> Bin
         end,
    case M of
        #{users := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> e_field_Album_users(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

encode_msg_NodeInfo(Msg, TrUserData) -> encode_msg_NodeInfo(Msg, <<>>, TrUserData).


encode_msg_NodeInfo(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{ip := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{port := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{tokens := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true -> e_field_NodeInfo_tokens(TrF3, B2, TrUserData)
            end;
        _ -> B2
    end.

encode_msg_NodeIp(Msg, TrUserData) -> encode_msg_NodeIp(Msg, <<>>, TrUserData).


encode_msg_NodeIp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{ip := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{port := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

e_mfield_Message_user_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_UserData(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_error_message(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ErrorReply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_albums(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Albums(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_album(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Album(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_node_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NodeInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_nodes_infos(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NodeInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Message_nodes_infos([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_mfield_Message_nodes_infos(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Message_nodes_infos(Rest, Bin3, TrUserData);
e_field_Message_nodes_infos([], Bin, _TrUserData) -> Bin.

e_mfield_Message_nodes_ips(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NodeIp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Message_nodes_ips([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_Message_nodes_ips(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Message_nodes_ips(Rest, Bin3, TrUserData);
e_field_Message_nodes_ips([], Bin, _TrUserData) -> Bin.

e_mfield_Message_new_client(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NewClient(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_leave_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_LeaveData(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Albums_names([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Albums_names(Rest, Bin3, TrUserData);
e_field_Albums_names([], Bin, _TrUserData) -> Bin.

e_mfield_File_classifications(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Classification(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_File_classifications([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_File_classifications(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_File_classifications(Rest, Bin3, TrUserData);
e_field_File_classifications([], Bin, _TrUserData) -> Bin.

e_mfield_NewClient_clients(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Client(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_NewClient_clients([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_NewClient_clients(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_NewClient_clients(Rest, Bin3, TrUserData);
e_field_NewClient_clients([], Bin, _TrUserData) -> Bin.

e_mfield_Album_files(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_File(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Album_files([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Album_files(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Album_files(Rest, Bin3, TrUserData);
e_field_Album_files([], Bin, _TrUserData) -> Bin.

e_field_Album_users([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Album_users(Rest, Bin3, TrUserData);
e_field_Album_users([], Bin, _TrUserData) -> Bin.

e_field_NodeInfo_tokens(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_NodeInfo_tokens(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_NodeInfo_tokens([], Bin, _TrUserData) -> Bin.

e_pfield_NodeInfo_tokens([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_NodeInfo_tokens(Rest, Bin2, TrUserData);
e_pfield_NodeInfo_tokens([], Bin, _TrUserData) -> Bin.

e_enum_Type('NONE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_Type('SUCESIUM', Bin, _TrUserData) -> <<Bin/binary, 21>>;
e_enum_Type('ERRORREPLY', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_Type('ALBUMS', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_Type('REGISTER', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_Type('LOGIN', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_Type('LOGOUT', Bin, _TrUserData) -> <<Bin/binary, 5>>;
e_enum_Type('ALBUMSLIST', Bin, _TrUserData) -> <<Bin/binary, 6>>;
e_enum_Type('ALBUMCREATE', Bin, _TrUserData) -> <<Bin/binary, 7>>;
e_enum_Type('ALBUM', Bin, _TrUserData) -> <<Bin/binary, 8>>;
e_enum_Type('ALBUMEDIT', Bin, _TrUserData) -> <<Bin/binary, 9>>;
e_enum_Type('STARTENTRANCE', Bin, _TrUserData) -> <<Bin/binary, 10>>;
e_enum_Type('ENDENTRANCE', Bin, _TrUserData) -> <<Bin/binary, 11>>;
e_enum_Type('NODESINFO', Bin, _TrUserData) -> <<Bin/binary, 12>>;
e_enum_Type('READ', Bin, _TrUserData) -> <<Bin/binary, 13>>;
e_enum_Type('WRITE', Bin, _TrUserData) -> <<Bin/binary, 14>>;
e_enum_Type('NODEIP', Bin, _TrUserData) -> <<Bin/binary, 15>>;
e_enum_Type('NEWCLIENT', Bin, _TrUserData) -> <<Bin/binary, 16>>;
e_enum_Type('ISLASTREPLY', Bin, _TrUserData) -> <<Bin/binary, 17>>;
e_enum_Type('ISLAST', Bin, _TrUserData) -> <<Bin/binary, 18>>;
e_enum_Type('LEAVE', Bin, _TrUserData) -> <<Bin/binary, 19>>;
e_enum_Type('UPDATE', Bin, _TrUserData) -> <<Bin/binary, 20>>;
e_enum_Type(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Message', Bin, TrUserData) -> id(decode_msg_Message(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserData', Bin, TrUserData) -> id(decode_msg_UserData(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ErrorReply', Bin, TrUserData) -> id(decode_msg_ErrorReply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Albums', Bin, TrUserData) -> id(decode_msg_Albums(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Classification', Bin, TrUserData) -> id(decode_msg_Classification(Bin, TrUserData), TrUserData);
decode_msg_2_doit('File', Bin, TrUserData) -> id(decode_msg_File(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Client', Bin, TrUserData) -> id(decode_msg_Client(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NewClient', Bin, TrUserData) -> id(decode_msg_NewClient(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LeaveData', Bin, TrUserData) -> id(decode_msg_LeaveData(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Album', Bin, TrUserData) -> id(decode_msg_Album(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NodeInfo', Bin, TrUserData) -> id(decode_msg_NodeInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NodeIp', Bin, TrUserData) -> id(decode_msg_NodeIp(Bin, TrUserData), TrUserData).



decode_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin,
                               0,
                               0,
                               0,
                               id('NONE', TrUserData),
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               id([], TrUserData),
                               id('$undef', TrUserData),
                               id([], TrUserData),
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               TrUserData).

dfp_read_field_def_Message(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_user_data(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_error_message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_album_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_albums(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_album(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_node_info(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<66, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_nodes_infos(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<72, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_token(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<82, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_nodes_ips(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<90, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_new_client(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<96, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_is_last(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<106, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_leave_data(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, R1, F@_9, R2, F@_11, F@_12, F@_13, TrUserData) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{user_data => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{error_message => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{album_name => F@_4}
         end,
    S5 = if F@_5 == '$undef' -> S4;
            true -> S4#{albums => F@_5}
         end,
    S6 = if F@_6 == '$undef' -> S5;
            true -> S5#{album => F@_6}
         end,
    S7 = if F@_7 == '$undef' -> S6;
            true -> S6#{node_info => F@_7}
         end,
    S8 = if R1 == '$undef' -> S7;
            true -> S7#{nodes_infos => lists_reverse(R1, TrUserData)}
         end,
    S9 = if F@_9 == '$undef' -> S8;
            true -> S8#{token => F@_9}
         end,
    S10 = if R2 == '$undef' -> S9;
             true -> S9#{nodes_ips => lists_reverse(R2, TrUserData)}
          end,
    S11 = if F@_11 == '$undef' -> S10;
             true -> S10#{new_client => F@_11}
          end,
    S12 = if F@_12 == '$undef' -> S11;
             true -> S11#{is_last => F@_12}
          end,
    if F@_13 == '$undef' -> S12;
       true -> S12#{leave_data => F@_13}
    end;
dfp_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Message_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        18 -> d_field_Message_user_data(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        26 -> d_field_Message_error_message(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        34 -> d_field_Message_album_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        42 -> d_field_Message_albums(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        50 -> d_field_Message_album(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        58 -> d_field_Message_node_info(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        66 -> d_field_Message_nodes_infos(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        72 -> d_field_Message_token(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        82 -> d_field_Message_nodes_ips(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        90 -> d_field_Message_new_client(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        96 -> d_field_Message_is_last(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        106 -> d_field_Message_leave_data(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                1 -> skip_64_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                2 -> skip_length_delimited_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                3 -> skip_group_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                5 -> skip_32_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
            end
    end;
dg_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, R1, F@_9, R2, F@_11, F@_12, F@_13, TrUserData) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{user_data => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{error_message => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{album_name => F@_4}
         end,
    S5 = if F@_5 == '$undef' -> S4;
            true -> S4#{albums => F@_5}
         end,
    S6 = if F@_6 == '$undef' -> S5;
            true -> S5#{album => F@_6}
         end,
    S7 = if F@_7 == '$undef' -> S6;
            true -> S6#{node_info => F@_7}
         end,
    S8 = if R1 == '$undef' -> S7;
            true -> S7#{nodes_infos => lists_reverse(R1, TrUserData)}
         end,
    S9 = if F@_9 == '$undef' -> S8;
            true -> S8#{token => F@_9}
         end,
    S10 = if R2 == '$undef' -> S9;
             true -> S9#{nodes_ips => lists_reverse(R2, TrUserData)}
          end,
    S11 = if F@_11 == '$undef' -> S10;
             true -> S10#{new_client => F@_11}
          end,
    S12 = if F@_12 == '$undef' -> S11;
             true -> S11#{is_last => F@_12}
          end,
    if F@_13 == '$undef' -> S12;
       true -> S12#{leave_data => F@_13}
    end.

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Type(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_user_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_user_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_user_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_UserData(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_UserData(Prev, NewFValue, TrUserData)
                               end,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               F@_11,
                               F@_12,
                               F@_13,
                               TrUserData).

d_field_Message_error_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_error_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_error_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_ErrorReply(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_ErrorReply(Prev, NewFValue, TrUserData)
                               end,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               F@_11,
                               F@_12,
                               F@_13,
                               TrUserData).

d_field_Message_album_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_album_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_album_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_albums(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_albums(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_albums(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Albums(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_Albums(Prev, NewFValue, TrUserData)
                               end,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               F@_11,
                               F@_12,
                               F@_13,
                               TrUserData).

d_field_Message_album(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_album(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_album(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Album(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_Album(Prev, NewFValue, TrUserData)
                               end,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               F@_11,
                               F@_12,
                               F@_13,
                               TrUserData).

d_field_Message_node_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_node_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_node_info(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NodeInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_NodeInfo(Prev, NewFValue, TrUserData)
                               end,
                               F@_8,
                               F@_9,
                               F@_10,
                               F@_11,
                               F@_12,
                               F@_13,
                               TrUserData).

d_field_Message_nodes_infos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_nodes_infos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_nodes_infos(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NodeInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, cons(NewFValue, Prev, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_nodes_ips(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_nodes_ips(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_nodes_ips(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NodeIp(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(NewFValue, Prev, TrUserData), F@_11, F@_12, F@_13, TrUserData).

d_field_Message_new_client(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_new_client(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_new_client(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, Prev, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NewClient(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_NewClient(Prev, NewFValue, TrUserData)
                               end,
                               F@_12,
                               F@_13,
                               TrUserData).

d_field_Message_is_last(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_is_last(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_is_last(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, TrUserData).

d_field_Message_leave_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_Message_leave_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_leave_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_LeaveData(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               F@_11,
                               F@_12,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_LeaveData(Prev, NewFValue, TrUserData)
                               end,
                               TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_group_Message(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

decode_msg_UserData(Bin, TrUserData) -> dfp_read_field_def_UserData(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_UserData(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_UserData_username(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_UserData(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_UserData_password(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_UserData(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2};
dfp_read_field_def_UserData(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_UserData(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_UserData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_UserData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_UserData(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UserData_username(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_UserData_password(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UserData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_UserData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_UserData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_UserData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_UserData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_UserData(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2}.

d_field_UserData_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UserData_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_UserData_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserData(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_UserData_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_UserData_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_UserData_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserData(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_UserData(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_UserData(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_UserData(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UserData(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_UserData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_UserData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_UserData(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserData(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_UserData(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserData(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_UserData(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UserData(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_UserData(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_UserData(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_ErrorReply(Bin, TrUserData) -> dfp_read_field_def_ErrorReply(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_ErrorReply(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ErrorReply_message(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ErrorReply(<<>>, 0, 0, _, F@_1, _) -> #{message => F@_1};
dfp_read_field_def_ErrorReply(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ErrorReply(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ErrorReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ErrorReply(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ErrorReply(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ErrorReply_message(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ErrorReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ErrorReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ErrorReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ErrorReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ErrorReply(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ErrorReply(<<>>, 0, 0, _, F@_1, _) -> #{message => F@_1}.

d_field_ErrorReply_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ErrorReply_message(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ErrorReply_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ErrorReply(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_ErrorReply(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ErrorReply(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ErrorReply(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ErrorReply(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ErrorReply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ErrorReply(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ErrorReply(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ErrorReply(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ErrorReply(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ErrorReply(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ErrorReply(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ErrorReply(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ErrorReply(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ErrorReply(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_Albums(Bin, TrUserData) -> dfp_read_field_def_Albums(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_Albums(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_Albums_names(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_Albums(<<>>, 0, 0, _, R1, TrUserData) -> #{names => lists_reverse(R1, TrUserData)};
dfp_read_field_def_Albums(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_Albums(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_Albums(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_Albums(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_Albums(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Albums_names(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Albums(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_Albums(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_Albums(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_Albums(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_Albums(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_Albums(<<>>, 0, 0, _, R1, TrUserData) -> #{names => lists_reverse(R1, TrUserData)}.

d_field_Albums_names(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_Albums_names(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_Albums_names(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Albums(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Albums(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_Albums(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_Albums(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Albums(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_Albums(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_Albums(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_Albums(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Albums(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_Albums(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Albums(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_Albums(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Albums(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_Albums(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Albums(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_Classification(Bin, TrUserData) -> dfp_read_field_def_Classification(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_Classification(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Classification_username(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Classification(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Classification_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Classification(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, value => F@_2};
dfp_read_field_def_Classification(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Classification(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Classification(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Classification(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Classification(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Classification_username(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_Classification_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Classification(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Classification(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Classification(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Classification(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Classification(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Classification(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, value => F@_2}.

d_field_Classification_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Classification_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Classification_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Classification(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Classification_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Classification_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Classification_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Classification(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Classification(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Classification(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Classification(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Classification(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Classification(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Classification(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Classification(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Classification(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Classification(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Classification(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Classification(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Classification(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Classification(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Classification(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_File(Bin, TrUserData) -> dfp_read_field_def_File(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_File(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_File_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_File(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_File_hash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_File(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_File_classifications(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_File(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    S1 = #{name => F@_1, hash => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{classifications => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_File(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_File(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_File(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_File(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_File(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_File_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_File_hash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_File_classifications(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_File(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_File(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_File(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_File(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_File(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_File(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) ->
    S1 = #{name => F@_1, hash => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{classifications => lists_reverse(R1, TrUserData)}
    end.

d_field_File_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_File_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_File_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_File(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_File_hash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_File_hash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_File_hash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_File(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_File_classifications(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_File_classifications(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_File_classifications(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Classification(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_File(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_File(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_File(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_File(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_File(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_File(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_File(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_File(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_File(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_File(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_File(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_File(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_File(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_File(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_File(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_Client(Bin, TrUserData) -> dfp_read_field_def_Client(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_Client(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Client_username(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Client(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Client_ip(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Client(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Client_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Client(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{username => F@_1, ip => F@_2, port => F@_3};
dfp_read_field_def_Client(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_Client(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Client(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_Client(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Client(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Client_username(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_Client_ip(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_Client_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Client(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_Client(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_Client(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_Client(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_Client(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Client(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{username => F@_1, ip => F@_2, port => F@_3}.

d_field_Client_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Client_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Client_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_Client_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Client_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Client_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Client(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_Client_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Client_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Client_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Client(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_Client(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_Client(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_Client(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Client(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Client(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_Client(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Client(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Client(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_Client(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Client(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_Client(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Client(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_Client(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Client(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_NewClient(Bin, TrUserData) -> dfp_read_field_def_NewClient(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_NewClient(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_NewClient_clients(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_NewClient(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_NewClient_clock(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_NewClient(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_NewClient_position(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_NewClient(<<>>, 0, 0, _, R1, F@_2, F@_3, TrUserData) ->
    S1 = #{clock => F@_2, position => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{clients => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_NewClient(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_NewClient(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_NewClient(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_NewClient(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_NewClient(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_NewClient_clients(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_NewClient_clock(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_NewClient_position(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_NewClient(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_NewClient(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_NewClient(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_NewClient(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_NewClient(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_NewClient(<<>>, 0, 0, _, R1, F@_2, F@_3, TrUserData) ->
    S1 = #{clock => F@_2, position => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{clients => lists_reverse(R1, TrUserData)}
    end.

d_field_NewClient_clients(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_NewClient_clients(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_NewClient_clients(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Client(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_NewClient(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

d_field_NewClient_clock(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_NewClient_clock(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_NewClient_clock(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_NewClient(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_NewClient_position(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_NewClient_position(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_NewClient_position(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_NewClient(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_NewClient(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_NewClient(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_NewClient(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_NewClient(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_NewClient(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_NewClient(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_NewClient(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NewClient(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_NewClient(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NewClient(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_NewClient(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_NewClient(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_NewClient(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_NewClient(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_LeaveData(Bin, TrUserData) -> dfp_read_field_def_LeaveData(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_LeaveData(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_LeaveData_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LeaveData(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_LeaveData_clock(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LeaveData(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_LeaveData_position(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LeaveData(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{name => F@_1, clock => F@_2, position => F@_3};
dfp_read_field_def_LeaveData(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_LeaveData(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_LeaveData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_LeaveData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_LeaveData(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_LeaveData_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_LeaveData_clock(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_LeaveData_position(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_LeaveData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_LeaveData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_LeaveData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_LeaveData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_LeaveData(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_LeaveData(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{name => F@_1, clock => F@_2, position => F@_3}.

d_field_LeaveData_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_LeaveData_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_LeaveData_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_LeaveData(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_LeaveData_clock(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_LeaveData_clock(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_LeaveData_clock(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_LeaveData(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_LeaveData_position(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_LeaveData_position(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_LeaveData_position(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_LeaveData(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_LeaveData(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_LeaveData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_LeaveData(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_LeaveData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_LeaveData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_LeaveData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_LeaveData(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaveData(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_LeaveData(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaveData(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_LeaveData(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_LeaveData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_LeaveData(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_LeaveData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_Album(Bin, TrUserData) -> dfp_read_field_def_Album(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_Album(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Album_files(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Album(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Album_users(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Album(<<>>, 0, 0, _, R1, R2, TrUserData) ->
    S1 = #{users => lists_reverse(R2, TrUserData)},
    if R1 == '$undef' -> S1;
       true -> S1#{files => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_Album(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Album(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Album(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Album(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Album(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Album_files(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Album_users(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Album(<<>>, 0, 0, _, R1, R2, TrUserData) ->
    S1 = #{users => lists_reverse(R2, TrUserData)},
    if R1 == '$undef' -> S1;
       true -> S1#{files => lists_reverse(R1, TrUserData)}
    end.

d_field_Album_files(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Album_files(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Album_files(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_File(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Album(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_Album_users(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Album_users(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Album_users(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Album(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Album(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Album(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Album(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Album(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Album(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Album(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Album(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Album(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Album(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Album(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_NodeInfo(Bin, TrUserData) -> dfp_read_field_def_NodeInfo(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_NodeInfo(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_NodeInfo_ip(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_NodeInfo(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_NodeInfo_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_NodeInfo(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_pfield_NodeInfo_tokens(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_NodeInfo(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_NodeInfo_tokens(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_NodeInfo(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #{ip => F@_1, port => F@_2, tokens => lists_reverse(R1, TrUserData)};
dfp_read_field_def_NodeInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_NodeInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_NodeInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_NodeInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_NodeInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_NodeInfo_ip(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_NodeInfo_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_pfield_NodeInfo_tokens(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_NodeInfo_tokens(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_NodeInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_NodeInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_NodeInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_NodeInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_NodeInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_NodeInfo(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #{ip => F@_1, port => F@_2, tokens => lists_reverse(R1, TrUserData)}.

d_field_NodeInfo_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_NodeInfo_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_NodeInfo_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_NodeInfo(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_NodeInfo_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_NodeInfo_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_NodeInfo_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_NodeInfo(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_NodeInfo_tokens(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_NodeInfo_tokens(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_NodeInfo_tokens(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_NodeInfo(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_NodeInfo_tokens(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_pfield_NodeInfo_tokens(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_pfield_NodeInfo_tokens(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_NodeInfo_tokens(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_NodeInfo(Rest2, 0, 0, F, F@_1, F@_2, NewSeq, TrUserData).

d_packed_field_NodeInfo_tokens(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_NodeInfo_tokens(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_NodeInfo_tokens(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    d_packed_field_NodeInfo_tokens(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_NodeInfo_tokens(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

skip_varint_NodeInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_NodeInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_NodeInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_NodeInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_NodeInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_NodeInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_NodeInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NodeInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_NodeInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NodeInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_NodeInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_NodeInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_NodeInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_NodeInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_NodeIp(Bin, TrUserData) -> dfp_read_field_def_NodeIp(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_NodeIp(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_NodeIp_ip(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_NodeIp(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_NodeIp_port(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_NodeIp(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{ip => F@_1, port => F@_2};
dfp_read_field_def_NodeIp(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_NodeIp(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_NodeIp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_NodeIp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_NodeIp(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_NodeIp_ip(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_NodeIp_port(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_NodeIp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_NodeIp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_NodeIp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_NodeIp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_NodeIp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_NodeIp(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{ip => F@_1, port => F@_2}.

d_field_NodeIp_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_NodeIp_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_NodeIp_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_NodeIp(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_NodeIp_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_NodeIp_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_NodeIp_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_NodeIp(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_NodeIp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_NodeIp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_NodeIp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_NodeIp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_NodeIp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_NodeIp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_NodeIp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NodeIp(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_NodeIp(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NodeIp(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_NodeIp(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_NodeIp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_NodeIp(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_NodeIp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

d_enum_Type(0) -> 'NONE';
d_enum_Type(21) -> 'SUCESIUM';
d_enum_Type(1) -> 'ERRORREPLY';
d_enum_Type(2) -> 'ALBUMS';
d_enum_Type(3) -> 'REGISTER';
d_enum_Type(4) -> 'LOGIN';
d_enum_Type(5) -> 'LOGOUT';
d_enum_Type(6) -> 'ALBUMSLIST';
d_enum_Type(7) -> 'ALBUMCREATE';
d_enum_Type(8) -> 'ALBUM';
d_enum_Type(9) -> 'ALBUMEDIT';
d_enum_Type(10) -> 'STARTENTRANCE';
d_enum_Type(11) -> 'ENDENTRANCE';
d_enum_Type(12) -> 'NODESINFO';
d_enum_Type(13) -> 'READ';
d_enum_Type(14) -> 'WRITE';
d_enum_Type(15) -> 'NODEIP';
d_enum_Type(16) -> 'NEWCLIENT';
d_enum_Type(17) -> 'ISLASTREPLY';
d_enum_Type(18) -> 'ISLAST';
d_enum_Type(19) -> 'LEAVE';
d_enum_Type(20) -> 'UPDATE';
d_enum_Type(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Message' -> merge_msg_Message(Prev, New, TrUserData);
        'UserData' -> merge_msg_UserData(Prev, New, TrUserData);
        'ErrorReply' -> merge_msg_ErrorReply(Prev, New, TrUserData);
        'Albums' -> merge_msg_Albums(Prev, New, TrUserData);
        'Classification' -> merge_msg_Classification(Prev, New, TrUserData);
        'File' -> merge_msg_File(Prev, New, TrUserData);
        'Client' -> merge_msg_Client(Prev, New, TrUserData);
        'NewClient' -> merge_msg_NewClient(Prev, New, TrUserData);
        'LeaveData' -> merge_msg_LeaveData(Prev, New, TrUserData);
        'Album' -> merge_msg_Album(Prev, New, TrUserData);
        'NodeInfo' -> merge_msg_NodeInfo(Prev, New, TrUserData);
        'NodeIp' -> merge_msg_NodeIp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{type := NFtype}} -> S1#{type => NFtype};
             {#{type := PFtype}, _} -> S1#{type => PFtype};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{user_data := PFuser_data}, #{user_data := NFuser_data}} -> S2#{user_data => merge_msg_UserData(PFuser_data, NFuser_data, TrUserData)};
             {_, #{user_data := NFuser_data}} -> S2#{user_data => NFuser_data};
             {#{user_data := PFuser_data}, _} -> S2#{user_data => PFuser_data};
             {_, _} -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{error_message := PFerror_message}, #{error_message := NFerror_message}} -> S3#{error_message => merge_msg_ErrorReply(PFerror_message, NFerror_message, TrUserData)};
             {_, #{error_message := NFerror_message}} -> S3#{error_message => NFerror_message};
             {#{error_message := PFerror_message}, _} -> S3#{error_message => PFerror_message};
             {_, _} -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{album_name := NFalbum_name}} -> S4#{album_name => NFalbum_name};
             {#{album_name := PFalbum_name}, _} -> S4#{album_name => PFalbum_name};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {#{albums := PFalbums}, #{albums := NFalbums}} -> S5#{albums => merge_msg_Albums(PFalbums, NFalbums, TrUserData)};
             {_, #{albums := NFalbums}} -> S5#{albums => NFalbums};
             {#{albums := PFalbums}, _} -> S5#{albums => PFalbums};
             {_, _} -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {#{album := PFalbum}, #{album := NFalbum}} -> S6#{album => merge_msg_Album(PFalbum, NFalbum, TrUserData)};
             {_, #{album := NFalbum}} -> S6#{album => NFalbum};
             {#{album := PFalbum}, _} -> S6#{album => PFalbum};
             {_, _} -> S6
         end,
    S8 = case {PMsg, NMsg} of
             {#{node_info := PFnode_info}, #{node_info := NFnode_info}} -> S7#{node_info => merge_msg_NodeInfo(PFnode_info, NFnode_info, TrUserData)};
             {_, #{node_info := NFnode_info}} -> S7#{node_info => NFnode_info};
             {#{node_info := PFnode_info}, _} -> S7#{node_info => PFnode_info};
             {_, _} -> S7
         end,
    S9 = case {PMsg, NMsg} of
             {#{nodes_infos := PFnodes_infos}, #{nodes_infos := NFnodes_infos}} -> S8#{nodes_infos => 'erlang_++'(PFnodes_infos, NFnodes_infos, TrUserData)};
             {_, #{nodes_infos := NFnodes_infos}} -> S8#{nodes_infos => NFnodes_infos};
             {#{nodes_infos := PFnodes_infos}, _} -> S8#{nodes_infos => PFnodes_infos};
             {_, _} -> S8
         end,
    S10 = case {PMsg, NMsg} of
              {_, #{token := NFtoken}} -> S9#{token => NFtoken};
              {#{token := PFtoken}, _} -> S9#{token => PFtoken};
              _ -> S9
          end,
    S11 = case {PMsg, NMsg} of
              {#{nodes_ips := PFnodes_ips}, #{nodes_ips := NFnodes_ips}} -> S10#{nodes_ips => 'erlang_++'(PFnodes_ips, NFnodes_ips, TrUserData)};
              {_, #{nodes_ips := NFnodes_ips}} -> S10#{nodes_ips => NFnodes_ips};
              {#{nodes_ips := PFnodes_ips}, _} -> S10#{nodes_ips => PFnodes_ips};
              {_, _} -> S10
          end,
    S12 = case {PMsg, NMsg} of
              {#{new_client := PFnew_client}, #{new_client := NFnew_client}} -> S11#{new_client => merge_msg_NewClient(PFnew_client, NFnew_client, TrUserData)};
              {_, #{new_client := NFnew_client}} -> S11#{new_client => NFnew_client};
              {#{new_client := PFnew_client}, _} -> S11#{new_client => PFnew_client};
              {_, _} -> S11
          end,
    S13 = case {PMsg, NMsg} of
              {_, #{is_last := NFis_last}} -> S12#{is_last => NFis_last};
              {#{is_last := PFis_last}, _} -> S12#{is_last => PFis_last};
              _ -> S12
          end,
    case {PMsg, NMsg} of
        {#{leave_data := PFleave_data}, #{leave_data := NFleave_data}} -> S13#{leave_data => merge_msg_LeaveData(PFleave_data, NFleave_data, TrUserData)};
        {_, #{leave_data := NFleave_data}} -> S13#{leave_data => NFleave_data};
        {#{leave_data := PFleave_data}, _} -> S13#{leave_data => PFleave_data};
        {_, _} -> S13
    end.

-compile({nowarn_unused_function,merge_msg_UserData/3}).
merge_msg_UserData(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S1#{username => NFusername};
             {#{username := PFusername}, _} -> S1#{username => PFusername};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{password := NFpassword}} -> S2#{password => NFpassword};
        {#{password := PFpassword}, _} -> S2#{password => PFpassword};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_ErrorReply/3}).
merge_msg_ErrorReply(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{message := NFmessage}} -> S1#{message => NFmessage};
        {#{message := PFmessage}, _} -> S1#{message => PFmessage};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Albums/3}).
merge_msg_Albums(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{names := PFnames}, #{names := NFnames}} -> S1#{names => 'erlang_++'(PFnames, NFnames, TrUserData)};
        {_, #{names := NFnames}} -> S1#{names => NFnames};
        {#{names := PFnames}, _} -> S1#{names => PFnames};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Classification/3}).
merge_msg_Classification(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S1#{username => NFusername};
             {#{username := PFusername}, _} -> S1#{username => PFusername};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{value := NFvalue}} -> S2#{value => NFvalue};
        {#{value := PFvalue}, _} -> S2#{value => PFvalue};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_File/3}).
merge_msg_File(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{hash := NFhash}} -> S2#{hash => NFhash};
             {#{hash := PFhash}, _} -> S2#{hash => PFhash};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{classifications := PFclassifications}, #{classifications := NFclassifications}} -> S3#{classifications => 'erlang_++'(PFclassifications, NFclassifications, TrUserData)};
        {_, #{classifications := NFclassifications}} -> S3#{classifications => NFclassifications};
        {#{classifications := PFclassifications}, _} -> S3#{classifications => PFclassifications};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_Client/3}).
merge_msg_Client(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} -> S1#{username => NFusername};
             {#{username := PFusername}, _} -> S1#{username => PFusername};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{ip := NFip}} -> S2#{ip => NFip};
             {#{ip := PFip}, _} -> S2#{ip => PFip};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{port := NFport}} -> S3#{port => NFport};
        {#{port := PFport}, _} -> S3#{port => PFport};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_NewClient/3}).
merge_msg_NewClient(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clients := PFclients}, #{clients := NFclients}} -> S1#{clients => 'erlang_++'(PFclients, NFclients, TrUserData)};
             {_, #{clients := NFclients}} -> S1#{clients => NFclients};
             {#{clients := PFclients}, _} -> S1#{clients => PFclients};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{clock := NFclock}} -> S2#{clock => NFclock};
             {#{clock := PFclock}, _} -> S2#{clock => PFclock};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{position := NFposition}} -> S3#{position => NFposition};
        {#{position := PFposition}, _} -> S3#{position => PFposition};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_LeaveData/3}).
merge_msg_LeaveData(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{clock := NFclock}} -> S2#{clock => NFclock};
             {#{clock := PFclock}, _} -> S2#{clock => PFclock};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{position := NFposition}} -> S3#{position => NFposition};
        {#{position := PFposition}, _} -> S3#{position => PFposition};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_Album/3}).
merge_msg_Album(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{files := PFfiles}, #{files := NFfiles}} -> S1#{files => 'erlang_++'(PFfiles, NFfiles, TrUserData)};
             {_, #{files := NFfiles}} -> S1#{files => NFfiles};
             {#{files := PFfiles}, _} -> S1#{files => PFfiles};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {#{users := PFusers}, #{users := NFusers}} -> S2#{users => 'erlang_++'(PFusers, NFusers, TrUserData)};
        {_, #{users := NFusers}} -> S2#{users => NFusers};
        {#{users := PFusers}, _} -> S2#{users => PFusers};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_NodeInfo/3}).
merge_msg_NodeInfo(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{ip := NFip}} -> S1#{ip => NFip};
             {#{ip := PFip}, _} -> S1#{ip => PFip};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{port := NFport}} -> S2#{port => NFport};
             {#{port := PFport}, _} -> S2#{port => PFport};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{tokens := PFtokens}, #{tokens := NFtokens}} -> S3#{tokens => 'erlang_++'(PFtokens, NFtokens, TrUserData)};
        {_, #{tokens := NFtokens}} -> S3#{tokens => NFtokens};
        {#{tokens := PFtokens}, _} -> S3#{tokens => PFtokens};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_NodeIp/3}).
merge_msg_NodeIp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{ip := NFip}} -> S1#{ip => NFip};
             {#{ip := PFip}, _} -> S1#{ip => PFip};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{port := NFport}} -> S2#{port => NFport};
        {#{port := PFport}, _} -> S2#{port => PFport};
        _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
        'UserData' -> v_msg_UserData(Msg, [MsgName], TrUserData);
        'ErrorReply' -> v_msg_ErrorReply(Msg, [MsgName], TrUserData);
        'Albums' -> v_msg_Albums(Msg, [MsgName], TrUserData);
        'Classification' -> v_msg_Classification(Msg, [MsgName], TrUserData);
        'File' -> v_msg_File(Msg, [MsgName], TrUserData);
        'Client' -> v_msg_Client(Msg, [MsgName], TrUserData);
        'NewClient' -> v_msg_NewClient(Msg, [MsgName], TrUserData);
        'LeaveData' -> v_msg_LeaveData(Msg, [MsgName], TrUserData);
        'Album' -> v_msg_Album(Msg, [MsgName], TrUserData);
        'NodeInfo' -> v_msg_NodeInfo(Msg, [MsgName], TrUserData);
        'NodeIp' -> v_msg_NodeIp(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#{} = M, Path, TrUserData) ->
    case M of
        #{type := F1} -> v_enum_Type(F1, [type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{user_data := F2} -> v_submsg_UserData(F2, [user_data | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{error_message := F3} -> v_submsg_ErrorReply(F3, [error_message | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{album_name := F4} -> v_type_string(F4, [album_name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{albums := F5} -> v_submsg_Albums(F5, [albums | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{album := F6} -> v_submsg_Album(F6, [album | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{node_info := F7} -> v_submsg_NodeInfo(F7, [node_info | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{nodes_infos := F8} ->
            if is_list(F8) ->
                   _ = [v_submsg_NodeInfo(Elem, [nodes_infos | Path], TrUserData) || Elem <- F8],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'NodeInfo'}}, F8, [nodes_infos | Path])
            end;
        _ -> ok
    end,
    case M of
        #{token := F9} -> v_type_uint64(F9, [token | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{nodes_ips := F10} ->
            if is_list(F10) ->
                   _ = [v_submsg_NodeIp(Elem, [nodes_ips | Path], TrUserData) || Elem <- F10],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'NodeIp'}}, F10, [nodes_ips | Path])
            end;
        _ -> ok
    end,
    case M of
        #{new_client := F11} -> v_submsg_NewClient(F11, [new_client | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{is_last := F12} -> v_type_bool(F12, [is_last | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{leave_data := F13} -> v_submsg_LeaveData(F13, [leave_data | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
                      (user_data) -> ok;
                      (error_message) -> ok;
                      (album_name) -> ok;
                      (albums) -> ok;
                      (album) -> ok;
                      (node_info) -> ok;
                      (nodes_infos) -> ok;
                      (token) -> ok;
                      (nodes_ips) -> ok;
                      (new_client) -> ok;
                      (is_last) -> ok;
                      (leave_data) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Message(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Message'}, M, Path);
v_msg_Message(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_submsg_UserData/3}).
-dialyzer({nowarn_function,v_submsg_UserData/3}).
v_submsg_UserData(Msg, Path, TrUserData) -> v_msg_UserData(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_UserData/3}).
-dialyzer({nowarn_function,v_msg_UserData/3}).
v_msg_UserData(#{} = M, Path, TrUserData) ->
    case M of
        #{username := F1} -> v_type_string(F1, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_string(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_UserData(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'UserData'}, M, Path);
v_msg_UserData(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserData'}, X, Path).

-compile({nowarn_unused_function,v_submsg_ErrorReply/3}).
-dialyzer({nowarn_function,v_submsg_ErrorReply/3}).
v_submsg_ErrorReply(Msg, Path, TrUserData) -> v_msg_ErrorReply(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_ErrorReply/3}).
-dialyzer({nowarn_function,v_msg_ErrorReply/3}).
v_msg_ErrorReply(#{} = M, Path, TrUserData) ->
    case M of
        #{message := F1} -> v_type_string(F1, [message | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (message) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ErrorReply(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ErrorReply'}, M, Path);
v_msg_ErrorReply(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ErrorReply'}, X, Path).

-compile({nowarn_unused_function,v_submsg_Albums/3}).
-dialyzer({nowarn_function,v_submsg_Albums/3}).
v_submsg_Albums(Msg, Path, TrUserData) -> v_msg_Albums(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_Albums/3}).
-dialyzer({nowarn_function,v_msg_Albums/3}).
v_msg_Albums(#{} = M, Path, TrUserData) ->
    case M of
        #{names := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, [names | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F1, [names | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (names) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Albums(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Albums'}, M, Path);
v_msg_Albums(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Albums'}, X, Path).

-compile({nowarn_unused_function,v_submsg_Classification/3}).
-dialyzer({nowarn_function,v_submsg_Classification/3}).
v_submsg_Classification(Msg, Path, TrUserData) -> v_msg_Classification(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_Classification/3}).
-dialyzer({nowarn_function,v_msg_Classification/3}).
v_msg_Classification(#{} = M, Path, TrUserData) ->
    case M of
        #{username := F1} -> v_type_string(F1, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{value := F2} -> v_type_uint32(F2, [value | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
                      (value) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Classification(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Classification'}, M, Path);
v_msg_Classification(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Classification'}, X, Path).

-compile({nowarn_unused_function,v_submsg_File/3}).
-dialyzer({nowarn_function,v_submsg_File/3}).
v_submsg_File(Msg, Path, TrUserData) -> v_msg_File(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_File/3}).
-dialyzer({nowarn_function,v_msg_File/3}).
v_msg_File(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{hash := F2} -> v_type_uint64(F2, [hash | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{classifications := F3} ->
            if is_list(F3) ->
                   _ = [v_submsg_Classification(Elem, [classifications | Path], TrUserData) || Elem <- F3],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'Classification'}}, F3, [classifications | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (hash) -> ok;
                      (classifications) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_File(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'File'}, M, Path);
v_msg_File(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'File'}, X, Path).

-compile({nowarn_unused_function,v_submsg_Client/3}).
-dialyzer({nowarn_function,v_submsg_Client/3}).
v_submsg_Client(Msg, Path, TrUserData) -> v_msg_Client(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_Client/3}).
-dialyzer({nowarn_function,v_msg_Client/3}).
v_msg_Client(#{} = M, Path, TrUserData) ->
    case M of
        #{username := F1} -> v_type_string(F1, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{ip := F2} -> v_type_string(F2, [ip | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{port := F3} -> v_type_uint32(F3, [port | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
                      (ip) -> ok;
                      (port) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Client(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Client'}, M, Path);
v_msg_Client(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Client'}, X, Path).

-compile({nowarn_unused_function,v_submsg_NewClient/3}).
-dialyzer({nowarn_function,v_submsg_NewClient/3}).
v_submsg_NewClient(Msg, Path, TrUserData) -> v_msg_NewClient(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_NewClient/3}).
-dialyzer({nowarn_function,v_msg_NewClient/3}).
v_msg_NewClient(#{} = M, Path, TrUserData) ->
    case M of
        #{clients := F1} ->
            if is_list(F1) ->
                   _ = [v_submsg_Client(Elem, [clients | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'Client'}}, F1, [clients | Path])
            end;
        _ -> ok
    end,
    case M of
        #{clock := F2} -> v_type_uint32(F2, [clock | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{position := F3} -> v_type_uint32(F3, [position | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clients) -> ok;
                      (clock) -> ok;
                      (position) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_NewClient(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'NewClient'}, M, Path);
v_msg_NewClient(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'NewClient'}, X, Path).

-compile({nowarn_unused_function,v_submsg_LeaveData/3}).
-dialyzer({nowarn_function,v_submsg_LeaveData/3}).
v_submsg_LeaveData(Msg, Path, TrUserData) -> v_msg_LeaveData(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_LeaveData/3}).
-dialyzer({nowarn_function,v_msg_LeaveData/3}).
v_msg_LeaveData(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{clock := F2} -> v_type_uint32(F2, [clock | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{position := F3} -> v_type_uint32(F3, [position | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (clock) -> ok;
                      (position) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_LeaveData(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'LeaveData'}, M, Path);
v_msg_LeaveData(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'LeaveData'}, X, Path).

-compile({nowarn_unused_function,v_submsg_Album/3}).
-dialyzer({nowarn_function,v_submsg_Album/3}).
v_submsg_Album(Msg, Path, TrUserData) -> v_msg_Album(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_Album/3}).
-dialyzer({nowarn_function,v_msg_Album/3}).
v_msg_Album(#{} = M, Path, TrUserData) ->
    case M of
        #{files := F1} ->
            if is_list(F1) ->
                   _ = [v_submsg_File(Elem, [files | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, 'File'}}, F1, [files | Path])
            end;
        _ -> ok
    end,
    case M of
        #{users := F2} ->
            if is_list(F2) ->
                   _ = [v_type_string(Elem, [users | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F2, [users | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (files) -> ok;
                      (users) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Album(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'Album'}, M, Path);
v_msg_Album(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Album'}, X, Path).

-compile({nowarn_unused_function,v_submsg_NodeInfo/3}).
-dialyzer({nowarn_function,v_submsg_NodeInfo/3}).
v_submsg_NodeInfo(Msg, Path, TrUserData) -> v_msg_NodeInfo(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_NodeInfo/3}).
-dialyzer({nowarn_function,v_msg_NodeInfo/3}).
v_msg_NodeInfo(#{} = M, Path, TrUserData) ->
    case M of
        #{ip := F1} -> v_type_string(F1, [ip | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{port := F2} -> v_type_uint32(F2, [port | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{tokens := F3} ->
            if is_list(F3) ->
                   _ = [v_type_uint64(Elem, [tokens | Path], TrUserData) || Elem <- F3],
                   ok;
               true -> mk_type_error({invalid_list_of, uint64}, F3, [tokens | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (ip) -> ok;
                      (port) -> ok;
                      (tokens) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_NodeInfo(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'NodeInfo'}, M, Path);
v_msg_NodeInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'NodeInfo'}, X, Path).

-compile({nowarn_unused_function,v_submsg_NodeIp/3}).
-dialyzer({nowarn_function,v_submsg_NodeIp/3}).
v_submsg_NodeIp(Msg, Path, TrUserData) -> v_msg_NodeIp(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_NodeIp/3}).
-dialyzer({nowarn_function,v_msg_NodeIp/3}).
v_msg_NodeIp(#{} = M, Path, TrUserData) ->
    case M of
        #{ip := F1} -> v_type_string(F1, [ip | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{port := F2} -> v_type_uint32(F2, [port | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (ip) -> ok;
                      (port) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_NodeIp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'NodeIp'}, M, Path);
v_msg_NodeIp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'NodeIp'}, X, Path).

-compile({nowarn_unused_function,v_enum_Type/3}).
-dialyzer({nowarn_function,v_enum_Type/3}).
v_enum_Type('NONE', _Path, _TrUserData) -> ok;
v_enum_Type('SUCESIUM', _Path, _TrUserData) -> ok;
v_enum_Type('ERRORREPLY', _Path, _TrUserData) -> ok;
v_enum_Type('ALBUMS', _Path, _TrUserData) -> ok;
v_enum_Type('REGISTER', _Path, _TrUserData) -> ok;
v_enum_Type('LOGIN', _Path, _TrUserData) -> ok;
v_enum_Type('LOGOUT', _Path, _TrUserData) -> ok;
v_enum_Type('ALBUMSLIST', _Path, _TrUserData) -> ok;
v_enum_Type('ALBUMCREATE', _Path, _TrUserData) -> ok;
v_enum_Type('ALBUM', _Path, _TrUserData) -> ok;
v_enum_Type('ALBUMEDIT', _Path, _TrUserData) -> ok;
v_enum_Type('STARTENTRANCE', _Path, _TrUserData) -> ok;
v_enum_Type('ENDENTRANCE', _Path, _TrUserData) -> ok;
v_enum_Type('NODESINFO', _Path, _TrUserData) -> ok;
v_enum_Type('READ', _Path, _TrUserData) -> ok;
v_enum_Type('WRITE', _Path, _TrUserData) -> ok;
v_enum_Type('NODEIP', _Path, _TrUserData) -> ok;
v_enum_Type('NEWCLIENT', _Path, _TrUserData) -> ok;
v_enum_Type('ISLASTREPLY', _Path, _TrUserData) -> ok;
v_enum_Type('ISLAST', _Path, _TrUserData) -> ok;
v_enum_Type('LEAVE', _Path, _TrUserData) -> ok;
v_enum_Type('UPDATE', _Path, _TrUserData) -> ok;
v_enum_Type(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_Type(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'Type'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'Type'},
      [{'NONE', 0, []},
       {'SUCESIUM', 21, []},
       {'ERRORREPLY', 1, []},
       {'ALBUMS', 2, []},
       {'REGISTER', 3, []},
       {'LOGIN', 4, []},
       {'LOGOUT', 5, []},
       {'ALBUMSLIST', 6, []},
       {'ALBUMCREATE', 7, []},
       {'ALBUM', 8, []},
       {'ALBUMEDIT', 9, []},
       {'STARTENTRANCE', 10, []},
       {'ENDENTRANCE', 11, []},
       {'NODESINFO', 12, []},
       {'READ', 13, []},
       {'WRITE', 14, []},
       {'NODEIP', 15, []},
       {'NEWCLIENT', 16, []},
       {'ISLASTREPLY', 17, []},
       {'ISLAST', 18, []},
       {'LEAVE', 19, []},
       {'UPDATE', 20, []}]},
     {{msg, 'Message'},
      [#{name => type, fnum => 1, rnum => 2, type => {enum, 'Type'}, occurrence => defaulty, opts => []},
       #{name => user_data, fnum => 2, rnum => 3, type => {msg, 'UserData'}, occurrence => optional, opts => []},
       #{name => error_message, fnum => 3, rnum => 4, type => {msg, 'ErrorReply'}, occurrence => optional, opts => []},
       #{name => album_name, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => albums, fnum => 5, rnum => 6, type => {msg, 'Albums'}, occurrence => optional, opts => []},
       #{name => album, fnum => 6, rnum => 7, type => {msg, 'Album'}, occurrence => optional, opts => []},
       #{name => node_info, fnum => 7, rnum => 8, type => {msg, 'NodeInfo'}, occurrence => optional, opts => []},
       #{name => nodes_infos, fnum => 8, rnum => 9, type => {msg, 'NodeInfo'}, occurrence => repeated, opts => []},
       #{name => token, fnum => 9, rnum => 10, type => uint64, occurrence => optional, opts => []},
       #{name => nodes_ips, fnum => 10, rnum => 11, type => {msg, 'NodeIp'}, occurrence => repeated, opts => []},
       #{name => new_client, fnum => 11, rnum => 12, type => {msg, 'NewClient'}, occurrence => optional, opts => []},
       #{name => is_last, fnum => 12, rnum => 13, type => bool, occurrence => optional, opts => []},
       #{name => leave_data, fnum => 13, rnum => 14, type => {msg, 'LeaveData'}, occurrence => optional, opts => []}]},
     {{msg, 'UserData'}, [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []}]},
     {{msg, 'ErrorReply'}, [#{name => message, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}]},
     {{msg, 'Albums'}, [#{name => names, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}]},
     {{msg, 'Classification'}, [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => value, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, 'File'},
      [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => hash, fnum => 2, rnum => 3, type => uint64, occurrence => defaulty, opts => []},
       #{name => classifications, fnum => 3, rnum => 4, type => {msg, 'Classification'}, occurrence => repeated, opts => []}]},
     {{msg, 'Client'},
      [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => ip, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
       #{name => port, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, 'NewClient'},
      [#{name => clients, fnum => 1, rnum => 2, type => {msg, 'Client'}, occurrence => repeated, opts => []},
       #{name => clock, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
       #{name => position, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, 'LeaveData'},
      [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => clock, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
       #{name => position, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, 'Album'}, [#{name => files, fnum => 1, rnum => 2, type => {msg, 'File'}, occurrence => repeated, opts => []}, #{name => users, fnum => 2, rnum => 3, type => string, occurrence => repeated, opts => []}]},
     {{msg, 'NodeInfo'},
      [#{name => ip, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
       #{name => tokens, fnum => 3, rnum => 4, type => uint64, occurrence => repeated, opts => [packed]}]},
     {{msg, 'NodeIp'}, [#{name => ip, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => port, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []}]}].


get_msg_names() -> ['Message', 'UserData', 'ErrorReply', 'Albums', 'Classification', 'File', 'Client', 'NewClient', 'LeaveData', 'Album', 'NodeInfo', 'NodeIp'].


get_group_names() -> [].


get_msg_or_group_names() -> ['Message', 'UserData', 'ErrorReply', 'Albums', 'Classification', 'File', 'Client', 'NewClient', 'LeaveData', 'Album', 'NodeInfo', 'NodeIp'].


get_enum_names() -> ['Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Message') ->
    [#{name => type, fnum => 1, rnum => 2, type => {enum, 'Type'}, occurrence => defaulty, opts => []},
     #{name => user_data, fnum => 2, rnum => 3, type => {msg, 'UserData'}, occurrence => optional, opts => []},
     #{name => error_message, fnum => 3, rnum => 4, type => {msg, 'ErrorReply'}, occurrence => optional, opts => []},
     #{name => album_name, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => albums, fnum => 5, rnum => 6, type => {msg, 'Albums'}, occurrence => optional, opts => []},
     #{name => album, fnum => 6, rnum => 7, type => {msg, 'Album'}, occurrence => optional, opts => []},
     #{name => node_info, fnum => 7, rnum => 8, type => {msg, 'NodeInfo'}, occurrence => optional, opts => []},
     #{name => nodes_infos, fnum => 8, rnum => 9, type => {msg, 'NodeInfo'}, occurrence => repeated, opts => []},
     #{name => token, fnum => 9, rnum => 10, type => uint64, occurrence => optional, opts => []},
     #{name => nodes_ips, fnum => 10, rnum => 11, type => {msg, 'NodeIp'}, occurrence => repeated, opts => []},
     #{name => new_client, fnum => 11, rnum => 12, type => {msg, 'NewClient'}, occurrence => optional, opts => []},
     #{name => is_last, fnum => 12, rnum => 13, type => bool, occurrence => optional, opts => []},
     #{name => leave_data, fnum => 13, rnum => 14, type => {msg, 'LeaveData'}, occurrence => optional, opts => []}];
find_msg_def('UserData') -> [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []}];
find_msg_def('ErrorReply') -> [#{name => message, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}];
find_msg_def('Albums') -> [#{name => names, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}];
find_msg_def('Classification') -> [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => value, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def('File') ->
    [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => hash, fnum => 2, rnum => 3, type => uint64, occurrence => defaulty, opts => []},
     #{name => classifications, fnum => 3, rnum => 4, type => {msg, 'Classification'}, occurrence => repeated, opts => []}];
find_msg_def('Client') ->
    [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => ip, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
     #{name => port, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def('NewClient') ->
    [#{name => clients, fnum => 1, rnum => 2, type => {msg, 'Client'}, occurrence => repeated, opts => []},
     #{name => clock, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
     #{name => position, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def('LeaveData') ->
    [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => clock, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
     #{name => position, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def('Album') -> [#{name => files, fnum => 1, rnum => 2, type => {msg, 'File'}, occurrence => repeated, opts => []}, #{name => users, fnum => 2, rnum => 3, type => string, occurrence => repeated, opts => []}];
find_msg_def('NodeInfo') ->
    [#{name => ip, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
     #{name => tokens, fnum => 3, rnum => 4, type => uint64, occurrence => repeated, opts => [packed]}];
find_msg_def('NodeIp') -> [#{name => ip, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => port, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(_) -> error.


find_enum_def('Type') ->
    [{'NONE', 0, []},
     {'SUCESIUM', 21, []},
     {'ERRORREPLY', 1, []},
     {'ALBUMS', 2, []},
     {'REGISTER', 3, []},
     {'LOGIN', 4, []},
     {'LOGOUT', 5, []},
     {'ALBUMSLIST', 6, []},
     {'ALBUMCREATE', 7, []},
     {'ALBUM', 8, []},
     {'ALBUMEDIT', 9, []},
     {'STARTENTRANCE', 10, []},
     {'ENDENTRANCE', 11, []},
     {'NODESINFO', 12, []},
     {'READ', 13, []},
     {'WRITE', 14, []},
     {'NODEIP', 15, []},
     {'NEWCLIENT', 16, []},
     {'ISLASTREPLY', 17, []},
     {'ISLAST', 18, []},
     {'LEAVE', 19, []},
     {'UPDATE', 20, []}];
find_enum_def(_) -> error.


enum_symbol_by_value('Type', Value) -> enum_symbol_by_value_Type(Value).


enum_value_by_symbol('Type', Sym) -> enum_value_by_symbol_Type(Sym).


enum_symbol_by_value_Type(0) -> 'NONE';
enum_symbol_by_value_Type(21) -> 'SUCESIUM';
enum_symbol_by_value_Type(1) -> 'ERRORREPLY';
enum_symbol_by_value_Type(2) -> 'ALBUMS';
enum_symbol_by_value_Type(3) -> 'REGISTER';
enum_symbol_by_value_Type(4) -> 'LOGIN';
enum_symbol_by_value_Type(5) -> 'LOGOUT';
enum_symbol_by_value_Type(6) -> 'ALBUMSLIST';
enum_symbol_by_value_Type(7) -> 'ALBUMCREATE';
enum_symbol_by_value_Type(8) -> 'ALBUM';
enum_symbol_by_value_Type(9) -> 'ALBUMEDIT';
enum_symbol_by_value_Type(10) -> 'STARTENTRANCE';
enum_symbol_by_value_Type(11) -> 'ENDENTRANCE';
enum_symbol_by_value_Type(12) -> 'NODESINFO';
enum_symbol_by_value_Type(13) -> 'READ';
enum_symbol_by_value_Type(14) -> 'WRITE';
enum_symbol_by_value_Type(15) -> 'NODEIP';
enum_symbol_by_value_Type(16) -> 'NEWCLIENT';
enum_symbol_by_value_Type(17) -> 'ISLASTREPLY';
enum_symbol_by_value_Type(18) -> 'ISLAST';
enum_symbol_by_value_Type(19) -> 'LEAVE';
enum_symbol_by_value_Type(20) -> 'UPDATE'.


enum_value_by_symbol_Type('NONE') -> 0;
enum_value_by_symbol_Type('SUCESIUM') -> 21;
enum_value_by_symbol_Type('ERRORREPLY') -> 1;
enum_value_by_symbol_Type('ALBUMS') -> 2;
enum_value_by_symbol_Type('REGISTER') -> 3;
enum_value_by_symbol_Type('LOGIN') -> 4;
enum_value_by_symbol_Type('LOGOUT') -> 5;
enum_value_by_symbol_Type('ALBUMSLIST') -> 6;
enum_value_by_symbol_Type('ALBUMCREATE') -> 7;
enum_value_by_symbol_Type('ALBUM') -> 8;
enum_value_by_symbol_Type('ALBUMEDIT') -> 9;
enum_value_by_symbol_Type('STARTENTRANCE') -> 10;
enum_value_by_symbol_Type('ENDENTRANCE') -> 11;
enum_value_by_symbol_Type('NODESINFO') -> 12;
enum_value_by_symbol_Type('READ') -> 13;
enum_value_by_symbol_Type('WRITE') -> 14;
enum_value_by_symbol_Type('NODEIP') -> 15;
enum_value_by_symbol_Type('NEWCLIENT') -> 16;
enum_value_by_symbol_Type('ISLASTREPLY') -> 17;
enum_value_by_symbol_Type('ISLAST') -> 18;
enum_value_by_symbol_Type('LEAVE') -> 19;
enum_value_by_symbol_Type('UPDATE') -> 20.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"protos.Message">>) -> 'Message';
fqbin_to_msg_name(<<"protos.UserData">>) -> 'UserData';
fqbin_to_msg_name(<<"protos.ErrorReply">>) -> 'ErrorReply';
fqbin_to_msg_name(<<"protos.Albums">>) -> 'Albums';
fqbin_to_msg_name(<<"protos.Classification">>) -> 'Classification';
fqbin_to_msg_name(<<"protos.File">>) -> 'File';
fqbin_to_msg_name(<<"protos.Client">>) -> 'Client';
fqbin_to_msg_name(<<"protos.NewClient">>) -> 'NewClient';
fqbin_to_msg_name(<<"protos.LeaveData">>) -> 'LeaveData';
fqbin_to_msg_name(<<"protos.Album">>) -> 'Album';
fqbin_to_msg_name(<<"protos.NodeInfo">>) -> 'NodeInfo';
fqbin_to_msg_name(<<"protos.NodeIp">>) -> 'NodeIp';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Message') -> <<"protos.Message">>;
msg_name_to_fqbin('UserData') -> <<"protos.UserData">>;
msg_name_to_fqbin('ErrorReply') -> <<"protos.ErrorReply">>;
msg_name_to_fqbin('Albums') -> <<"protos.Albums">>;
msg_name_to_fqbin('Classification') -> <<"protos.Classification">>;
msg_name_to_fqbin('File') -> <<"protos.File">>;
msg_name_to_fqbin('Client') -> <<"protos.Client">>;
msg_name_to_fqbin('NewClient') -> <<"protos.NewClient">>;
msg_name_to_fqbin('LeaveData') -> <<"protos.LeaveData">>;
msg_name_to_fqbin('Album') -> <<"protos.Album">>;
msg_name_to_fqbin('NodeInfo') -> <<"protos.NodeInfo">>;
msg_name_to_fqbin('NodeIp') -> <<"protos.NodeIp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"protos.Type">>) -> 'Type';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Type') -> <<"protos.Type">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> protos.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "messages.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["messages.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["messages"].


get_msg_containment("messages") -> ['Album', 'Albums', 'Classification', 'Client', 'ErrorReply', 'File', 'LeaveData', 'Message', 'NewClient', 'NodeInfo', 'NodeIp', 'UserData'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("messages") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("messages") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("messages") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("messages") -> ['Type'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"protos.NodeIp">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.UserData">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.LeaveData">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.Albums">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.NewClient">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.Client">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.Message">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.File">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.ErrorReply">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.Album">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.Classification">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"protos.NodeInfo">>) -> "messages";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"protos.Type">>) -> "messages";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "git".
